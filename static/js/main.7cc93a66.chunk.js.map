{"version":3,"sources":["geoJSON.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","markeryBar","geojson","type","features","geometry","coordinates","properties","title","description","markeryZjedz","markeryZobacz","layerToAdd","mapboxgl","accessToken","App","props","dissapear","bind","componentDidMount","dissapearNearPlaces","buttonPressed","state","lng","lat","zoom","showOutsideOfRzeszowDiv","travelTime","showTravelTimeDiv","position","coordinatesOfTheMarkerToDraw","undefined","cacheMarker","showTheNearPlaces","nearPlacesString","firstRoute","show","number","secondRoute","thirdRoute","map","Map","container","this","mapContainer","style","center","maxBounds","on","setState","getCenter","toFixed","getZoom","geolocate","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","addControl","pozycja","latitude","longitude","firstUse","lineOfMovement","allmarkers","concat","z","console","log","stringPobliskie","coords","document","getElementsByTagName","className","drawRouteFromUserToASpecifiedMarker","forEach","marker","Math","abs","id","addLayer","addALineToTheMap","push","getSource","setData","addMarkersToMap","tablica","index","url","req","XMLHttpRequest","responseType","open","onload","response","routes","color","addRouteToTheMap","setLayoutProperty","addRoute","send","setInterval","route","getLayer","once","dane","jsonResponse","duration","opacity","onClickMarker","markersToAdd","iconClass","el","createElement","onclick","Marker","setLngLat","setPopup","Popup","offset","setHTML","addTo","appear","getElementById","remove","whichButton","round","onClick","ref","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7cc93a66.chunk.js","sourcesContent":["var markeryZjedz = {\r\n    geojson: {\r\n        type: 'FeatureCollection',\r\n        features: [{\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.006207, 50.036881]\r\n            },\r\n            properties: {\r\n                title: 'Piwa Świata',\r\n                description: 'Sklep z piwami kraftowymi.'\r\n            }\r\n        },\r\n        {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.003789, 50.038130]\r\n            },\r\n            properties: {\r\n                title: 'KukNuk',\r\n                description: 'Kuchnia nowoczesna.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [21.999612, 50.038412]\r\n            },\r\n            properties: {\r\n                title: 'Osteria Bellannuna',\r\n                description: 'Kuchnia włoska.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.002863, 50.039861]\r\n            },\r\n            properties: {\r\n                title: 'Dara kebab',\r\n                description: 'Kebab 😀'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.017859, 50.029875]\r\n            },\r\n            properties: {\r\n                title: 'PizzaEPasta',\r\n                description: 'Pizza i makaron'\r\n            }\r\n        }]\r\n    }\r\n}; var markeryZobacz = {\r\n    geojson: {\r\n        type: 'FeatureCollection',\r\n        features: [{\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.014375, 50.030625]\r\n            },\r\n            properties: {\r\n                title: 'Uniwersytet Rzeszowski',\r\n                description: 'Główny budynek kolegium przyrodniczego URZ.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [21.999444, 50.040985]\r\n            },\r\n            properties: {\r\n                title: 'Pomnik czynu rewolucyjnego',\r\n                description: 'Najbardziej znany pomnik w Rzeszowie.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [21.996178, 50.022300]\r\n            },\r\n            properties: {\r\n                title: 'Stadion stal',\r\n                description: 'Stadion Miejski Stal w Rzeszowie.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.000248, 50.032607]\r\n            },\r\n            properties: {\r\n                title: 'Zamek Lubomirskich',\r\n                description: 'Jeden z głównych zabytków w Rzeszowie wybudowany w latach 1902-1906.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [50.042461, 21.998271]\r\n            },\r\n            properties: {\r\n                title: 'Galeria Rzeszów',\r\n                description: 'Największy centrum handlowe w woj. podkarpackim.'\r\n            }\r\n        }]\r\n    }\r\n}; var markeryBar = {\r\n    geojson: {\r\n        type: 'FeatureCollection',\r\n        features: [{\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.005686, 50.037118]\r\n            },\r\n            properties: {\r\n                title: 'Corner pub Rzeszów',\r\n                description: 'Pub z pegazusem i dobrym piwem.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.003853, 50.038123]\r\n            },\r\n            properties: {\r\n                title: 'Cybermachina',\r\n                description: 'Konsole, planszówki, cosplay i alkohol.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.001335, 50.036220]\r\n            },\r\n            properties: {\r\n                title: 'Hokuspokus',\r\n                description: 'Włoska, amerykańska i meksykańska kuchnia.'\r\n            }\r\n        }, {\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [22.003245, 50.036338]\r\n            },\r\n            properties: {\r\n                title: 'Manufkatura',\r\n                description: 'Największy w Polsce browar restauracyjny'\r\n            }\r\n        }\r\n        ]\r\n    }\r\n}\r\n\r\nvar layerToAdd = [\"22.006207,50.036881;22.003789,50.038130;21.999612,50.038412;22.002863,50.039861;22.017859,50.029875;22.006207,50.036881\",\r\n                  \"22.014375,50.030625;21.999444,50.040985;21.996178,50.022300;22.000248,50.032607;21.998271,50.042461;22.014375,50.030625\",\r\n                 \"22.005686,50.037118;22.003853,50.038123;22.001335,50.036220;22.003245,50.036338;22.005686,50.037118\"];\r\n\r\nmodule.exports = {markeryBar, markeryZjedz, markeryZobacz, layerToAdd};\r\n\r\n/*LatLng piwaSwiata = new LatLng(50.036881, 22.006207);\r\nLatLng kukNuk = new LatLng(50.038130, 22.003789);\r\nLatLng osteriaBellannuna = new LatLng(50.038412, 21.999612);\r\nLatLng daraKebab = new LatLng(50.039861, 22.002863);\r\nLatLng PizzaEPasta = new LatLng(50.029875, 22.017859);\r\n\r\nLatLng uniwersytetRzeszowski = new LatLng(50.030625, 22.014375);\r\nLatLng pomnikCzynuRewolucyjnego = new LatLng(50.040985, 21.999444);\r\nLatLng stadionStal = new LatLng(50.022300, 21.996178);\r\nLatLng zamekLubomirskich = new LatLng(50.032607, 22.000248);\r\nLatLng galeriaRzeszow = new LatLng(50.042461, 21.998271);\r\n\r\nLatLng cornerPubRzeszow = new LatLng(50.037118, 22.005686);\r\nLatLng cybermachina = new LatLng(50.038123, 22.003853);\r\nLatLng hokusPokus = new LatLng(50.036220, 22.001335);\r\nLatLng manufaktura = new LatLng(50.036338, 22.003245);*/","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport mapboxgl from 'mapbox-gl';\nimport './App.css';\nimport { markeryZobacz, markeryZjedz, markeryBar, layerToAdd } from './geoJSON';\n\n\nmapboxgl.accessToken = 'pk.eyJ1IjoicGtwazciLCJhIjoiY2s0MGExaTdhMDB3YTNkbnlsc2dxbmFlZSJ9.SyulIR86ATGSgywlKKMnkA';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.dissapear = this.dissapear.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.dissapearNearPlaces = this.dissapearNearPlaces.bind(this);\n    this.buttonPressed = this.buttonPressed.bind(this);\n\n\n    this.state = {\n      lng: 21.991193,\n      lat: 50.041520,\n      zoom: 12,\n      showOutsideOfRzeszowDiv: false,\n      travelTime: 0,\n      showTravelTimeDiv: false,\n      position: { lng: 0, lat: 0 },\n      coordinatesOfTheMarkerToDraw: undefined,\n      cacheMarker: undefined,\n      showTheNearPlaces: false,\n      nearPlacesString: \"\",\n      firstRoute: { show: false, number: 0 },\n      secondRoute: { show: false, number: 1 },\n      thirdRoute: { show: false, number: 2 }\n    };\n\n\n\n  }\n\n  componentDidMount() {\n\n    //Bounds of the map - can't scroll outside of them\n    var bounds = [\n      [21.857297, 49.928937], // Southwest coordinates\n      [22.101056, 50.081192] // Northeast coordinates\n    ];\n\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n      maxBounds: bounds\n    });\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n\n    let setTime = (dane) => { this.setState({ travelTime: dane }); };\n    let setShowTravelTimeToTrue = () => { this.setState({ showTravelTimeDiv: true }) };\n\n    var geolocate = new mapboxgl.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true\n    })\n\n    map.addControl(geolocate);\n\n\n    let pozycja = { latitude: 0, longitude: 0 };\n    var firstUse = true;\n    var coordinates;\n    var lineOfMovement = { coordinates: coordinates, type: \"LineString\" };\n    //console.log(geolocate.getSource);\n\n    var allmarkers = markeryBar.geojson.features.concat(markeryZjedz.geojson.features, markeryZobacz.geojson.features);\n    for (let z of allmarkers) {\n      console.log(z.geometry.coordinates[0]);\n    }\n\n    // If the user is out of the bounds of Rzeszów, show him the message that\n    // some of the functionalities might not work for him. \n    geolocate.on('outofmaxbounds', () => { this.setState({ showOutsideOfRzeszowDiv: true }); });\n\n    let stringPobliskie = \"\";\n\n\n    //on every geolocate tick\n    geolocate.on('geolocate', (position) => {\n\n\n\n      pozycja.latitude = position.coords.latitude; pozycja.longitude = position.coords.longitude;\n      //0.00008 - how large the change of location must be, to draw it on the map\n      console.log(\"wykonuje sie czesto\");\n      console.log(this.state.position.lat + \" \" + this.state.position.lng);\n      console.log(pozycja.latitude + \" \" + pozycja.longitude);\n\n\n      if (!(typeof this.state.coordinatesOfTheMarkerToDraw === 'undefined') && document.getElementsByTagName(\"button\")[0].className !== 'mapboxgl-ctrl-geolocate') {\n        drawRouteFromUserToASpecifiedMarker();\n      }\n\n      this.setState({ nearPlacesString: \"\" });\n\n      //Show the popup when the object is near \n      allmarkers.forEach((marker) => {\n\n        if (Math.abs(pozycja.latitude - marker.geometry.coordinates[1]) < 0.00060 && Math.abs(pozycja.longitude - marker.geometry.coordinates[0]) < 0.00060) {\n\n          console.log(\"popop\");\n          this.setState({ nearPlacesString: this.state.nearPlacesString + \"'\" + marker.properties.title + \"' \" });\n\n        }\n\n      })\n\n      if (this.state.nearPlacesString !== stringPobliskie) {\n\n        this.setState({ showTheNearPlaces: true });\n      }\n      stringPobliskie = this.state.nearPlacesString;\n\n\n\n      // Draw the route taken by the object only if the object changed its position more than 0.00008\n      if (Math.abs(this.state.position.lat - pozycja.latitude) > 0.00008 || Math.abs(this.state.position.lng - pozycja.longitude) > 0.00008) {\n        //Rysuj sciezke przebyta przez obiekt\n        console.log(\"WENWA\");\n\n        if (firstUse) {\n          coordinates = [\n            [pozycja.longitude, pozycja.latitude]\n          ];\n          lineOfMovement.coordinates = coordinates;\n          firstUse = false;\n          addALineToTheMap('routeUser', lineOfMovement);\n          this.setState({ position: { lng: pozycja.longitude, lat: pozycja.latitude } });\n        } else {\n\n          coordinates.push([pozycja.longitude, pozycja.latitude]);\n          lineOfMovement.coordinates = coordinates;\n          map.getSource('routeUser').setData(lineOfMovement);\n          this.setState({ position: { lng: pozycja.longitude, lat: pozycja.latitude } });\n        }\n\n\n        this.setState({ pozycja: { lng: pozycja.longitude, lat: pozycja.latitude } });\n      }\n    });\n\n\n\n    addMarkersToMap(markeryZjedz, 'markerZjedz');\n    addMarkersToMap(markeryZobacz, 'markerZobacz');\n    addMarkersToMap(markeryBar, 'markerBar');\n\n\n\n\n\n\n    // show chosen routes\n    map.on('load', () => {\n\n      addPremadeRoutes();\n\n      setInterval(() => {\n        let routes = [this.state.firstRoute, this.state.secondRoute, this.state.thirdRoute];\n        for (let route of routes) {\n          if (map.getLayer('route' + route.number)) {\n            if (route.show)\n              map.setLayoutProperty(\"route\" + route.number, 'visibility', 'visible');\n            else\n              map.setLayoutProperty(\"route\" + route.number, 'visibility', 'none');\n\n            //console.log(route.show + \"   \" + route.number);\n          }\n        }\n\n        if (document.getElementsByTagName(\"button\")[0].className == 'mapboxgl-ctrl-geolocate') {\n          if (map.getLayer('droga'))\n            map.setLayoutProperty(\"droga\", 'visibility', 'none');\n            \n            this.setState({showTravelTimeDiv:false});\n          \n        } else {\n          if (map.getLayer('droga')){\n            map.setLayoutProperty(\"droga\", 'visibility', 'visible');\n\n            this.setState({showTravelTimeDiv:true});\n          }\n        }\n\n\n      }, 100)\n\n    })\n\n\n\n\n    //// FUNKCJE FUNKCJE FUNKCJE FUNKCJE FUNKCJE FUNKCJE FUNKCJE FUNKCJE FUNKCJE FUNKCJE FUNKCJE ////\n    var once = true;\n    let drawRouteFromUserToASpecifiedMarker = () => {\n\n      let url = 'https://api.mapbox.com/directions/v5/mapbox/driving-traffic/' + this.state.coordinatesOfTheMarkerToDraw[0] + \",\" + this.state.coordinatesOfTheMarkerToDraw[1] + \";\" + pozycja.longitude + \",\" + pozycja.latitude + '?geometries=geojson&steps=true&&access_token=' + mapboxgl.accessToken;\n      console.log(this.state.coordinatesOfTheMarkerToDraw[0] + \",\" + this.state.coordinatesOfTheMarkerToDraw[1] + \";\" + pozycja.longitude + \",\" + pozycja.latitude + \"AAAAAAAAAAAAAAAAAAAAAAAAA\");\n      let req = new XMLHttpRequest();\n      req.responseType = 'json';\n      req.open('GET', url, true);\n      req.onload = function () {\n        let jsonResponse = req.response;\n        setTime(req.response.routes[0].duration);\n        setShowTravelTimeToTrue();\n        let coords = jsonResponse.routes[0].geometry;\n        console.log(coords);\n        // add the route to the map\n        addRoute(coords);\n      };\n      req.send();\n\n      function addRoute(coords) {\n        if (once)\n          addRouteToTheMap(\"droga\", coords, '#3b9ddd', 0.8);\n        once = false;\n        map.getSource('droga').setData(coords);\n      }\n    }\n\n    /**\n     * Adds premade routes from geoJSON.js file to the map. \n     */\n    function addPremadeRoutes() {\n      layerToAdd.forEach((tablica, index) => {\n        var url = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + tablica + '?geometries=geojson&steps=true&&access_token=' + mapboxgl.accessToken;\n        var req = new XMLHttpRequest();\n        req.responseType = 'json';\n        req.open('GET', url, true);\n        req.onload = function () {\n          var jsonResponse = req.response;\n          var coords = jsonResponse.routes[0].geometry;\n          console.log(coords);\n          // add the route to the map\n          addRoute(coords);\n        };\n        req.send();\n        function addRoute(coords) {\n          // check if the route is already loaded\n          let color = \"\";\n          if (index === 0) color = '#e68580';\n          if (index === 1) color = '#329999';\n          if (index === 2) color = '#db9000';\n          addRouteToTheMap(\"route\" + index, coords, color, 0.8);\n          map.setLayoutProperty(\"route\" + index, 'visibility', 'none');\n        };\n      })\n    }\n\n    /**\n     * Add a route with given parameters to the map.\n     * @param {string} index - id of the route to be added \n     * @param {*} coords - coords of the route (taken from the mapbox API)\n     * @param {string} color - color of the route to be added \n     * @param {number} opacity - opacity of the route to be added (from 0 to 1) \n     */\n    function addRouteToTheMap(index, coords, color, opacity) {\n      map.addLayer({\n        \"id\": index,\n        \"type\": \"line\",\n        \"source\": {\n          \"type\": \"geojson\",\n          \"data\": {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": coords\n          }\n        },\n        \"layout\": {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\"\n        },\n        \"paint\": {\n          \"line-color\": color,\n          \"line-width\": 8,\n          \"line-opacity\": opacity\n        }\n      });\n    }\n\n    /**\n     * Add a line to the map. If there are more than 2 coordinates, the line-join\n     * will be round.\n     * @param {string} id - id of the line to be added \n     * @param {*} coordinates - coordinates of the line to be drawn\n     */\n    function addALineToTheMap(id, coordinates) {\n      map.addLayer({\n        'id': id,\n        'type': 'line',\n        'source': {\n          'type': 'geojson',\n          'data': {\n            'type': 'Feature',\n            'properties': {},\n            'geometry': coordinates\n          }\n        },\n        'layout': {\n          'line-join': 'round',\n          'line-cap': 'round'\n        },\n        'paint': {\n          'line-color': '#888',\n          'line-width': 8,\n          'line-opacity': 0.8\n        }\n      });\n\n    }\n\n\n    let onClickMarker = (marker) => {\n     \n        if (document.getElementsByTagName(\"button\")[0].className !== 'mapboxgl-ctrl-geolocate') {\n          this.setState({ coordinatesOfTheMarkerToDraw: marker.geometry.coordinates });\n          drawRouteFromUserToASpecifiedMarker();\n        \n      }\n    };\n\n    /**\n     * Adds the markers from the given list to the map. \n     * @param markersToAdd  a list of markers that will be added to the map \n     */\n    function addMarkersToMap(markersToAdd, iconClass) {\n\n      markersToAdd.geojson.features.forEach(function (marker) {\n\n        // create a HTML element for each feature\n        var el = document.createElement('div');\n        el.className = iconClass;\n\n        el.onclick = () => { onClickMarker(marker) };\n\n        // make a marker for each feature and add to the map\n        new mapboxgl.Marker(el)\n          .setLngLat(marker.geometry.coordinates)\n          .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n            .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.description + '</p>'))\n          .addTo(map);\n      })\n    }\n\n  }\n\n\n  dissapear() {\n    this.setState({ appear: true });\n    var el = document.getElementById('miejsce');\n    el.remove();\n  }\n\n  dissapearNearPlaces() {\n    this.setState({ showTheNearPlaces: false });\n  }\n\n  buttonPressed(whichButton) {\n\n    if (whichButton === 0) {\n      if (this.state.firstRoute.show == false) {\n        this.setState({ firstRoute: { show: true, number: 0 } });\n        document.getElementById(\"buttonZjedz\").className = \"zjedzPrzyciskPressed\";\n      }\n      else {\n        this.setState({ firstRoute: { show: false, number: 0 } });\n        document.getElementById(\"buttonZjedz\").className = \"zjedzPrzycisk\";\n      }\n    }\n    if (whichButton === 1) {\n      if (this.state.secondRoute.show == false) {\n        this.setState({ secondRoute: { show: true, number: 1 } });\n        document.getElementById(\"buttonZobacz\").className = \"zobaczPrzyciskPressed\";\n      }\n      else {\n        this.setState({ secondRoute: { show: false, number: 1 } });\n        document.getElementById(\"buttonZobacz\").className = \"zobaczPrzycisk\";\n      }\n    }\n    if (whichButton === 2) {\n      if (this.state.thirdRoute.show == false) {\n        this.setState({ thirdRoute: { show: true, number: 2 } });\n        document.getElementById(\"buttonBar\").className = \"barPrzyciskPressed\";\n      }\n      else {\n        this.setState({ thirdRoute: { show: false, number: 2 } });\n        document.getElementById(\"buttonBar\").className = \"barPrzycisk\";\n      }\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        {this.state.showTravelTimeDiv ?\n          <div className='info-box' >\n            <p>Podróż zajmie {Math.round((this.state.travelTime / 60) * 100) / 100} minut</p>\n          </div> : <div></div>}\n        {this.state.showOutsideOfRzeszowDiv ?\n          <div id=\"miejsce\" className='sidebarStyle' onClick={this.dissapear}>\n            <div>Jesteś poza Rzeszowem, niektóre funkcjonalności mogą nie działać!</div>\n          </div> : <div></div>}\n        {this.state.showTheNearPlaces && this.state.nearPlacesString !== \"\" ?\n          <div onClick={this.dissapearNearPlaces} className='near-places'>Jesteś w pobliżu {this.state.nearPlacesString}</div> : <div></div>}\n        <div ref={el => this.mapContainer = el} className='mapContainer' />\n        <div id='buttonBar' className='barPrzycisk' onClick={() => this.buttonPressed(2)}></div>\n        <div id='buttonZobacz' className='zobaczPrzycisk' onClick={() => this.buttonPressed(1)}></div>\n        <div id='buttonZjedz' className='zjedzPrzycisk' onClick={() => this.buttonPressed(0)}></div>\n      </div>\n    )\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}